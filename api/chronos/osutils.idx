PipeHeaderName	chronos/osutils.html#PipeHeaderName	osutils: PipeHeaderName	
SignalPrefixName	chronos/osutils.html#SignalPrefixName	osutils: SignalPrefixName	
MaxSignalEventLength	chronos/osutils.html#MaxSignalEventLength	osutils: MaxSignalEventLength	
MaxSignalSuffixLength	chronos/osutils.html#MaxSignalSuffixLength	osutils: MaxSignalSuffixLength	
DescriptorFlag	chronos/osutils.html#DescriptorFlag	osutils: DescriptorFlag	
AsyncDescriptorDefault	chronos/osutils.html#AsyncDescriptorDefault	osutils: AsyncDescriptorDefault	
handleEintr	chronos/osutils.html#handleEintr.t,untyped	osutils: handleEintr(body: untyped): untyped	
setDescriptorBlocking	chronos/osutils.html#setDescriptorBlocking,cint,bool	osutils: setDescriptorBlocking(s: cint; value: bool): Result[void, OSErrorCode]	
setDescriptorBlocking	chronos/osutils.html#setDescriptorBlocking,SocketHandle,bool	osutils: setDescriptorBlocking(s: SocketHandle; value: bool): Result[void, OSErrorCode]	
setDescriptorInheritance	chronos/osutils.html#setDescriptorInheritance,cint,bool	osutils: setDescriptorInheritance(s: cint; value: bool): Result[void, OSErrorCode]	
getDescriptorInheritance	chronos/osutils.html#getDescriptorInheritance,cint	osutils: getDescriptorInheritance(s: cint): Result[bool, OSErrorCode]	
setDescriptorFlags	chronos/osutils.html#setDescriptorFlags,cint,bool,bool	osutils: setDescriptorFlags(s: cint; nonblock, cloexec: bool): Result[void, OSErrorCode]	
closeFd	chronos/osutils.html#closeFd,cint	osutils: closeFd(s: cint): int	
closeFd	chronos/osutils.html#closeFd,SocketHandle	osutils: closeFd(s: SocketHandle): int	
acceptConn	chronos/osutils.html#acceptConn,cint,ptr.SockAddr,ptr.SockLen,set[DescriptorFlag]	osutils: acceptConn(a1: cint; a2: ptr SockAddr; a3: ptr SockLen; a4: set[DescriptorFlag]): Result[\n    cint, OSErrorCode]	
createOsPipe	chronos/osutils.html#createOsPipe,set[DescriptorFlag],set[DescriptorFlag]	osutils: createOsPipe(readset, writeset: set[DescriptorFlag]): Result[\n    tuple[read: cint, write: cint], OSErrorCode]	
