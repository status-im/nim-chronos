DatagramCallback	chronos/transports/datagram.html#DatagramCallback	datagram: DatagramCallback	
UnsafeDatagramCallback	chronos/transports/datagram.html#UnsafeDatagramCallback	datagram: UnsafeDatagramCallback	
DatagramTransport	chronos/transports/datagram.html#DatagramTransport	datagram: DatagramTransport	
DgramTransportTrackerName	chronos/transports/datagram.html#DgramTransportTrackerName	datagram: DgramTransportTrackerName	
remoteAddress2	chronos/transports/datagram.html#remoteAddress2,DatagramTransport	datagram: remoteAddress2(transp: DatagramTransport): Result[TransportAddress, OSErrorCode]	
localAddress2	chronos/transports/datagram.html#localAddress2,DatagramTransport	datagram: localAddress2(transp: DatagramTransport): Result[TransportAddress, OSErrorCode]	
remoteAddress	chronos/transports/datagram.html#remoteAddress,DatagramTransport	datagram: remoteAddress(transp: DatagramTransport): TransportAddress	
localAddress	chronos/transports/datagram.html#localAddress,DatagramTransport	datagram: localAddress(transp: DatagramTransport): TransportAddress	
close	chronos/transports/datagram.html#close,DatagramTransport	datagram: close(transp: DatagramTransport)	
newDatagramTransport	chronos/transports/datagram.html#newDatagramTransport,DatagramCallback,TransportAddress,TransportAddress,AsyncFD,set[ServerFlags],pointer,DatagramTransport,int,int	datagram: newDatagramTransport(cbproc: DatagramCallback;\n                     remote: TransportAddress = AnyAddress;\n                     local: TransportAddress = AnyAddress;\n                     sock: AsyncFD = asyncInvalidSocket;\n                     flags: set[ServerFlags] = {}; udata: pointer = nil;\n                     child: DatagramTransport = nil;\n                     bufSize: int = DefaultDatagramBufferSize; ttl: int = 0;\n                     dualstack = DualStackType.Auto): DatagramTransport	
newDatagramTransport	chronos/transports/datagram.html#newDatagramTransport,DatagramCallback,ref.T,TransportAddress,TransportAddress,AsyncFD,set[ServerFlags],DatagramTransport,int,int	datagram: newDatagramTransport[T](cbproc: DatagramCallback; udata: ref T;\n                        remote: TransportAddress = AnyAddress;\n                        local: TransportAddress = AnyAddress;\n                        sock: AsyncFD = asyncInvalidSocket;\n                        flags: set[ServerFlags] = {};\n                        child: DatagramTransport = nil;\n                        bufSize: int = DefaultDatagramBufferSize; ttl: int = 0;\n                        dualstack = DualStackType.Auto): DatagramTransport	
newDatagramTransport6	chronos/transports/datagram.html#newDatagramTransport6,DatagramCallback,TransportAddress,TransportAddress,AsyncFD,set[ServerFlags],pointer,DatagramTransport,int,int	datagram: newDatagramTransport6(cbproc: DatagramCallback;\n                      remote: TransportAddress = AnyAddress6;\n                      local: TransportAddress = AnyAddress6;\n                      sock: AsyncFD = asyncInvalidSocket;\n                      flags: set[ServerFlags] = {}; udata: pointer = nil;\n                      child: DatagramTransport = nil;\n                      bufSize: int = DefaultDatagramBufferSize; ttl: int = 0;\n                      dualstack = DualStackType.Auto): DatagramTransport	
newDatagramTransport6	chronos/transports/datagram.html#newDatagramTransport6,DatagramCallback,ref.T,TransportAddress,TransportAddress,AsyncFD,set[ServerFlags],DatagramTransport,int,int	datagram: newDatagramTransport6[T](cbproc: DatagramCallback; udata: ref T;\n                         remote: TransportAddress = AnyAddress6;\n                         local: TransportAddress = AnyAddress6;\n                         sock: AsyncFD = asyncInvalidSocket;\n                         flags: set[ServerFlags] = {};\n                         child: DatagramTransport = nil;\n                         bufSize: int = DefaultDatagramBufferSize; ttl: int = 0;\n                         dualstack = DualStackType.Auto): DatagramTransport	
newDatagramTransport	chronos/transports/datagram.html#newDatagramTransport,UnsafeDatagramCallback,TransportAddress,TransportAddress,AsyncFD,set[ServerFlags],pointer,DatagramTransport,int,int	datagram: newDatagramTransport(cbproc: UnsafeDatagramCallback;\n                     remote: TransportAddress = AnyAddress;\n                     local: TransportAddress = AnyAddress;\n                     sock: AsyncFD = asyncInvalidSocket;\n                     flags: set[ServerFlags] = {}; udata: pointer = nil;\n                     child: DatagramTransport = nil;\n                     bufSize: int = DefaultDatagramBufferSize; ttl: int = 0;\n                     dualstack = DualStackType.Auto): DatagramTransport	
newDatagramTransport	chronos/transports/datagram.html#newDatagramTransport,UnsafeDatagramCallback,ref.T,TransportAddress,TransportAddress,AsyncFD,set[ServerFlags],DatagramTransport,int,int	datagram: newDatagramTransport[T](cbproc: UnsafeDatagramCallback; udata: ref T;\n                        remote: TransportAddress = AnyAddress;\n                        local: TransportAddress = AnyAddress;\n                        sock: AsyncFD = asyncInvalidSocket;\n                        flags: set[ServerFlags] = {};\n                        child: DatagramTransport = nil;\n                        bufSize: int = DefaultDatagramBufferSize; ttl: int = 0;\n                        dualstack = DualStackType.Auto): DatagramTransport	
newDatagramTransport6	chronos/transports/datagram.html#newDatagramTransport6,UnsafeDatagramCallback,TransportAddress,TransportAddress,AsyncFD,set[ServerFlags],pointer,DatagramTransport,int,int	datagram: newDatagramTransport6(cbproc: UnsafeDatagramCallback;\n                      remote: TransportAddress = AnyAddress6;\n                      local: TransportAddress = AnyAddress6;\n                      sock: AsyncFD = asyncInvalidSocket;\n                      flags: set[ServerFlags] = {}; udata: pointer = nil;\n                      child: DatagramTransport = nil;\n                      bufSize: int = DefaultDatagramBufferSize; ttl: int = 0;\n                      dualstack = DualStackType.Auto): DatagramTransport	
newDatagramTransport6	chronos/transports/datagram.html#newDatagramTransport6,UnsafeDatagramCallback,ref.T,TransportAddress,TransportAddress,AsyncFD,set[ServerFlags],DatagramTransport,int,int	datagram: newDatagramTransport6[T](cbproc: UnsafeDatagramCallback; udata: ref T;\n                         remote: TransportAddress = AnyAddress6;\n                         local: TransportAddress = AnyAddress6;\n                         sock: AsyncFD = asyncInvalidSocket;\n                         flags: set[ServerFlags] = {};\n                         child: DatagramTransport = nil;\n                         bufSize: int = DefaultDatagramBufferSize; ttl: int = 0;\n                         dualstack = DualStackType.Auto): DatagramTransport	
newDatagramTransport	chronos/transports/datagram.html#newDatagramTransport,DatagramCallback,Port,Port,Opt[IpAddress],Opt[IpAddress],set[ServerFlags],pointer,DatagramTransport,int,int	datagram: newDatagramTransport(cbproc: DatagramCallback; localPort: Port;\n                     remotePort: Port;\n                     local: Opt[IpAddress] = Opt.none(IpAddress);\n                     remote: Opt[IpAddress] = Opt.none(IpAddress);\n                     flags: set[ServerFlags] = {}; udata: pointer = nil;\n                     child: DatagramTransport = nil;\n                     bufSize: int = DefaultDatagramBufferSize; ttl: int = 0;\n                     dualstack = DualStackType.Auto): DatagramTransport	
newDatagramTransport	chronos/transports/datagram.html#newDatagramTransport,DatagramCallback,Port,Opt[IpAddress],set[ServerFlags],pointer,DatagramTransport,int,int	datagram: newDatagramTransport(cbproc: DatagramCallback; localPort: Port;\n                     local: Opt[IpAddress] = Opt.none(IpAddress);\n                     flags: set[ServerFlags] = {}; udata: pointer = nil;\n                     child: DatagramTransport = nil;\n                     bufSize: int = DefaultDatagramBufferSize; ttl: int = 0;\n                     dualstack = DualStackType.Auto): DatagramTransport	
newDatagramTransport	chronos/transports/datagram.html#newDatagramTransport,DatagramCallback,Port,Port,Opt[IpAddress],Opt[IpAddress],set[ServerFlags],ref.T,DatagramTransport,int,int	datagram: newDatagramTransport[T](cbproc: DatagramCallback; localPort: Port;\n                        remotePort: Port;\n                        local: Opt[IpAddress] = Opt.none(IpAddress);\n                        remote: Opt[IpAddress] = Opt.none(IpAddress);\n                        flags: set[ServerFlags] = {}; udata: ref T;\n                        child: DatagramTransport = nil;\n                        bufSize: int = DefaultDatagramBufferSize; ttl: int = 0;\n                        dualstack = DualStackType.Auto): DatagramTransport	
newDatagramTransport	chronos/transports/datagram.html#newDatagramTransport,DatagramCallback,Port,Opt[IpAddress],set[ServerFlags],ref.T,DatagramTransport,int,int	datagram: newDatagramTransport[T](cbproc: DatagramCallback; localPort: Port;\n                        local: Opt[IpAddress] = Opt.none(IpAddress);\n                        flags: set[ServerFlags] = {}; udata: ref T;\n                        child: DatagramTransport = nil;\n                        bufSize: int = DefaultDatagramBufferSize; ttl: int = 0;\n                        dualstack = DualStackType.Auto): DatagramTransport	
join	chronos/transports/datagram.html#join,DatagramTransport	datagram: join(transp: DatagramTransport): InternalRaisesFuture[void, (CancelledError,)]	
closed	chronos/transports/datagram.html#closed,DatagramTransport	datagram: closed(transp: DatagramTransport): bool	
closeWait	chronos/transports/datagram.html#closeWait,DatagramTransport	datagram: closeWait(transp: DatagramTransport): InternalRaisesFuture[void, void]	
send	chronos/transports/datagram.html#send,DatagramTransport,pointer,int	datagram: send(transp: DatagramTransport; pbytes: pointer; nbytes: int): InternalRaisesFuture[\n    void, (TransportError, CancelledError)]	
send	chronos/transports/datagram.html#send,DatagramTransport,string,int	datagram: send(transp: DatagramTransport; msg: string; msglen = -1): InternalRaisesFuture[\n    void, (TransportError, CancelledError)]	
send	chronos/transports/datagram.html#send,DatagramTransport,seq[T],int	datagram: send[T](transp: DatagramTransport; msg: seq[T]; msglen = -1): InternalRaisesFuture[\n    void, (TransportError, CancelledError)]	
sendTo	chronos/transports/datagram.html#sendTo,DatagramTransport,TransportAddress,pointer,int	datagram: sendTo(transp: DatagramTransport; remote: TransportAddress; pbytes: pointer;\n       nbytes: int): InternalRaisesFuture[void,\n    (TransportError, CancelledError)]	
sendTo	chronos/transports/datagram.html#sendTo,DatagramTransport,TransportAddress,string,int	datagram: sendTo(transp: DatagramTransport; remote: TransportAddress; msg: string;\n       msglen = -1): InternalRaisesFuture[void,\n    (TransportError, CancelledError)]	
sendTo	chronos/transports/datagram.html#sendTo,DatagramTransport,TransportAddress,seq[T],int	datagram: sendTo[T](transp: DatagramTransport; remote: TransportAddress; msg: seq[T];\n          msglen = -1): InternalRaisesFuture[void,\n    (TransportError, CancelledError)]	
peekMessage	chronos/transports/datagram.html#peekMessage,DatagramTransport,seq[byte],int	datagram: peekMessage(transp: DatagramTransport; msg: var seq[byte]; msglen: var int)	
getMessage	chronos/transports/datagram.html#getMessage,DatagramTransport	datagram: getMessage(transp: DatagramTransport): seq[byte]	
getUserData	chronos/transports/datagram.html#getUserData,DatagramTransport	datagram: getUserData[T](transp: DatagramTransport): T	
