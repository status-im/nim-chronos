TransportKind	chronos/transports/stream.html#TransportKind	stream: TransportKind	
None	chronos/transports/stream.html#None	TransportFlags.None	
WinServerPipe	chronos/transports/stream.html#WinServerPipe	TransportFlags.WinServerPipe	
WinNoPipeFlash	chronos/transports/stream.html#WinNoPipeFlash	TransportFlags.WinNoPipeFlash	
TcpNoDelay	chronos/transports/stream.html#TcpNoDelay	TransportFlags.TcpNoDelay	
V4Mapped	chronos/transports/stream.html#V4Mapped	TransportFlags.V4Mapped	
TransportFlags	chronos/transports/stream.html#TransportFlags	stream: TransportFlags	
SocketFlags	chronos/transports/stream.html#SocketFlags	stream: SocketFlags	
ReadMessagePredicate	chronos/transports/stream.html#ReadMessagePredicate	stream: ReadMessagePredicate	
StreamTransportTrackerName	chronos/transports/stream.html#StreamTransportTrackerName	stream: StreamTransportTrackerName	
StreamServerTrackerName	chronos/transports/stream.html#StreamServerTrackerName	stream: StreamServerTrackerName	
DefaultBacklogSize	chronos/transports/stream.html#DefaultBacklogSize	stream: DefaultBacklogSize	
StreamTransport	chronos/transports/stream.html#StreamTransport	stream: StreamTransport	
StreamCallback2	chronos/transports/stream.html#StreamCallback2	stream: StreamCallback2	
StreamCallback	chronos/transports/stream.html#StreamCallback	stream: StreamCallback	
TransportInitCallback	chronos/transports/stream.html#TransportInitCallback	stream: TransportInitCallback	
StreamServer	chronos/transports/stream.html#StreamServer	stream: StreamServer	
remoteAddress2	chronos/transports/stream.html#remoteAddress2,StreamTransport	stream: remoteAddress2(transp: StreamTransport): Result[TransportAddress, OSErrorCode]	
localAddress2	chronos/transports/stream.html#localAddress2,StreamTransport	stream: localAddress2(transp: StreamTransport): Result[TransportAddress, OSErrorCode]	
toException	chronos/transports/stream.html#toException,OSErrorCode	stream: toException(v: OSErrorCode): ref TransportOsError	
remoteAddress	chronos/transports/stream.html#remoteAddress,StreamTransport	stream: remoteAddress(transp: StreamTransport): TransportAddress	
localAddress	chronos/transports/stream.html#localAddress,StreamTransport	stream: localAddress(transp: StreamTransport): TransportAddress	
localAddress	chronos/transports/stream.html#localAddress,StreamServer	stream: localAddress(server: StreamServer): TransportAddress	
toUnchecked	chronos/transports/stream.html#toUnchecked.t,untyped	stream: toUnchecked(a: untyped): untyped	
connect	chronos/transports/stream.html#connect,TransportAddress,StreamTransport,set[SocketFlags]	stream: connect(address: TransportAddress; bufferSize = DefaultStreamBufferSize;\n        child: StreamTransport = nil; localAddress = TransportAddress();\n        flags: set[SocketFlags] = {}; dualstack = DualStackType.Auto): InternalRaisesFuture[\n    StreamTransport, (TransportError, CancelledError)]	
accept	chronos/transports/stream.html#accept,StreamServer	stream: accept(server: StreamServer): InternalRaisesFuture[StreamTransport, (\n    TransportUseClosedError, TransportTooManyError, TransportAbortedError,\n    TransportOsError, CancelledError)]	
start2	chronos/transports/stream.html#start2,StreamServer	stream: start2(server: StreamServer): Result[void, OSErrorCode]	
stop2	chronos/transports/stream.html#stop2,StreamServer	stream: stop2(server: StreamServer): Result[void, OSErrorCode]	
start	chronos/transports/stream.html#start,StreamServer	stream: start(server: StreamServer)	
stop	chronos/transports/stream.html#stop,StreamServer	stream: stop(server: StreamServer)	
join	chronos/transports/stream.html#join,StreamServer	stream: join(server: StreamServer): InternalRaisesFuture[void, (CancelledError,)]	
connect	chronos/transports/stream.html#connect,TransportAddress,StreamTransport,set[TransportFlags]	stream: connect(address: TransportAddress; bufferSize = DefaultStreamBufferSize;\n        child: StreamTransport = nil; flags: set[TransportFlags];\n        localAddress = TransportAddress(); dualstack = DualStackType.Auto): InternalRaisesFuture[\n    StreamTransport, (TransportError, CancelledError)]	
closed	chronos/transports/stream.html#closed,StreamServer	stream: closed(server: StreamServer): bool	
close	chronos/transports/stream.html#close,StreamServer	stream: close(server: StreamServer)	
closeWait	chronos/transports/stream.html#closeWait,StreamServer	stream: closeWait(server: StreamServer): InternalRaisesFuture[void, void]	
createStreamServer	chronos/transports/stream.html#createStreamServer,TransportAddress,StreamCallback2,set[ServerFlags],AsyncFD,int,int,StreamServer,TransportInitCallback,pointer	stream: createStreamServer(host: TransportAddress; cbproc: StreamCallback2;\n                   flags: set[ServerFlags] = {};\n                   sock: AsyncFD = asyncInvalidSocket;\n                   backlog: int = DefaultBacklogSize;\n                   bufferSize: int = DefaultStreamBufferSize;\n                   child: StreamServer = nil; init: TransportInitCallback = nil;\n                   udata: pointer = nil; dualstack = DualStackType.Auto): StreamServer	
createStreamServer	chronos/transports/stream.html#createStreamServer,TransportAddress,StreamCallback,set[ServerFlags],AsyncFD,int,int,StreamServer,TransportInitCallback,pointer	stream: createStreamServer(host: TransportAddress; cbproc: StreamCallback;\n                   flags: set[ServerFlags] = {};\n                   sock: AsyncFD = asyncInvalidSocket;\n                   backlog: int = DefaultBacklogSize;\n                   bufferSize: int = DefaultStreamBufferSize;\n                   child: StreamServer = nil; init: TransportInitCallback = nil;\n                   udata: pointer = nil; dualstack = DualStackType.Auto): StreamServer	
createStreamServer	chronos/transports/stream.html#createStreamServer,TransportAddress,set[ServerFlags],AsyncFD,int,int,StreamServer,TransportInitCallback,pointer	stream: createStreamServer(host: TransportAddress; flags: set[ServerFlags] = {};\n                   sock: AsyncFD = asyncInvalidSocket;\n                   backlog: int = DefaultBacklogSize;\n                   bufferSize: int = DefaultStreamBufferSize;\n                   child: StreamServer = nil; init: TransportInitCallback = nil;\n                   udata: pointer = nil; dualstack = DualStackType.Auto): StreamServer	
createStreamServer	chronos/transports/stream.html#createStreamServer,Port,Opt[IpAddress],set[ServerFlags],AsyncFD,int,int,StreamServer,TransportInitCallback,pointer	stream: createStreamServer(port: Port; host: Opt[IpAddress] = Opt.none(IpAddress);\n                   flags: set[ServerFlags] = {};\n                   sock: AsyncFD = asyncInvalidSocket;\n                   backlog: int = DefaultBacklogSize;\n                   bufferSize: int = DefaultStreamBufferSize;\n                   child: StreamServer = nil; init: TransportInitCallback = nil;\n                   udata: pointer = nil; dualstack = DualStackType.Auto): StreamServer	
createStreamServer	chronos/transports/stream.html#createStreamServer,StreamCallback2,Port,Opt[IpAddress],set[ServerFlags],AsyncFD,int,int,StreamServer,TransportInitCallback,pointer	stream: createStreamServer(cbproc: StreamCallback2; port: Port;\n                   host: Opt[IpAddress] = Opt.none(IpAddress);\n                   flags: set[ServerFlags] = {};\n                   sock: AsyncFD = asyncInvalidSocket;\n                   backlog: int = DefaultBacklogSize;\n                   bufferSize: int = DefaultStreamBufferSize;\n                   child: StreamServer = nil; init: TransportInitCallback = nil;\n                   udata: pointer = nil; dualstack = DualStackType.Auto): StreamServer	
createStreamServer	chronos/transports/stream.html#createStreamServer,TransportAddress,StreamCallback2,set[ServerFlags],ref.T,AsyncFD,int,int,StreamServer,TransportInitCallback	stream: createStreamServer[T](host: TransportAddress; cbproc: StreamCallback2;\n                      flags: set[ServerFlags] = {}; udata: ref T;\n                      sock: AsyncFD = asyncInvalidSocket;\n                      backlog: int = DefaultBacklogSize;\n                      bufferSize: int = DefaultStreamBufferSize;\n                      child: StreamServer = nil;\n                      init: TransportInitCallback = nil;\n                      dualstack = DualStackType.Auto): StreamServer	
createStreamServer	chronos/transports/stream.html#createStreamServer,TransportAddress,StreamCallback,set[ServerFlags],ref.T,AsyncFD,int,int,StreamServer,TransportInitCallback	stream: createStreamServer[T](host: TransportAddress; cbproc: StreamCallback;\n                      flags: set[ServerFlags] = {}; udata: ref T;\n                      sock: AsyncFD = asyncInvalidSocket;\n                      backlog: int = DefaultBacklogSize;\n                      bufferSize: int = DefaultStreamBufferSize;\n                      child: StreamServer = nil;\n                      init: TransportInitCallback = nil;\n                      dualstack = DualStackType.Auto): StreamServer	
createStreamServer	chronos/transports/stream.html#createStreamServer,TransportAddress,set[ServerFlags],ref.T,AsyncFD,int,int,StreamServer,TransportInitCallback	stream: createStreamServer[T](host: TransportAddress; flags: set[ServerFlags] = {};\n                      udata: ref T; sock: AsyncFD = asyncInvalidSocket;\n                      backlog: int = DefaultBacklogSize;\n                      bufferSize: int = DefaultStreamBufferSize;\n                      child: StreamServer = nil;\n                      init: TransportInitCallback = nil;\n                      dualstack = DualStackType.Auto): StreamServer	
createStreamServer	chronos/transports/stream.html#createStreamServer,StreamCallback2,Port,Opt[IpAddress],set[ServerFlags],ref.T,AsyncFD,int,int,StreamServer,TransportInitCallback	stream: createStreamServer[T](cbproc: StreamCallback2; port: Port;\n                      host: Opt[IpAddress] = Opt.none(IpAddress);\n                      flags: set[ServerFlags] = {}; udata: ref T;\n                      sock: AsyncFD = asyncInvalidSocket;\n                      backlog: int = DefaultBacklogSize;\n                      bufferSize: int = DefaultStreamBufferSize;\n                      child: StreamServer = nil;\n                      init: TransportInitCallback = nil;\n                      dualstack = DualStackType.Auto): StreamServer	
createStreamServer	chronos/transports/stream.html#createStreamServer,Port,Opt[IpAddress],set[ServerFlags],ref.T,AsyncFD,int,int,StreamServer,TransportInitCallback	stream: createStreamServer[T](port: Port; host: Opt[IpAddress] = Opt.none(IpAddress);\n                      flags: set[ServerFlags] = {}; udata: ref T;\n                      sock: AsyncFD = asyncInvalidSocket;\n                      backlog: int = DefaultBacklogSize;\n                      bufferSize: int = DefaultStreamBufferSize;\n                      child: StreamServer = nil;\n                      init: TransportInitCallback = nil;\n                      dualstack = DualStackType.Auto): StreamServer	
getUserData	chronos/transports/stream.html#getUserData,StreamServer	stream: getUserData[T](server: StreamServer): T	
write	chronos/transports/stream.html#write,StreamTransport,pointer,int	stream: write(transp: StreamTransport; pbytes: pointer; nbytes: int): InternalRaisesFuture[\n    int, (TransportError, CancelledError)]	
write	chronos/transports/stream.html#write,StreamTransport,string,int	stream: write(transp: StreamTransport; msg: string; msglen = -1): InternalRaisesFuture[\n    int, (TransportError, CancelledError)]	
write	chronos/transports/stream.html#write,StreamTransport,seq[T],int	stream: write[T](transp: StreamTransport; msg: seq[T]; msglen = -1): InternalRaisesFuture[\n    int, (TransportError, CancelledError)]	
writeFile	chronos/transports/stream.html#writeFile,StreamTransport,int,uint,int	stream: writeFile(transp: StreamTransport; handle: int; offset: uint = 0; size: int = 0): InternalRaisesFuture[\n    int, (TransportError, CancelledError)]	
atEof	chronos/transports/stream.html#atEof,StreamTransport	stream: atEof(transp: StreamTransport): bool	
readExactly	chronos/transports/stream.html#readExactly,StreamTransport,pointer,int	stream: readExactly(transp: StreamTransport; pbytes: pointer; nbytes: int): InternalRaisesFuture[\n    void, (TransportError, CancelledError)]	
readOnce	chronos/transports/stream.html#readOnce,StreamTransport,pointer,int	stream: readOnce(transp: StreamTransport; pbytes: pointer; nbytes: int): InternalRaisesFuture[\n    int, (TransportError, CancelledError)]	
readUntil	chronos/transports/stream.html#readUntil,StreamTransport,pointer,int,seq[byte]	stream: readUntil(transp: StreamTransport; pbytes: pointer; nbytes: int; sep: seq[byte]): InternalRaisesFuture[\n    int, (TransportError, CancelledError)]	
readLine	chronos/transports/stream.html#readLine,StreamTransport,int,string	stream: readLine(transp: StreamTransport; limit = 0; sep = &quot;\r\n&quot;): InternalRaisesFuture[\n    string, (TransportError, CancelledError)]	
read	chronos/transports/stream.html#read,StreamTransport	stream: read(transp: StreamTransport): InternalRaisesFuture[seq[byte],\n    (TransportError, CancelledError)]	
read	chronos/transports/stream.html#read,StreamTransport,int	stream: read(transp: StreamTransport; n: int): InternalRaisesFuture[seq[byte],\n    (TransportError, CancelledError)]	
consume	chronos/transports/stream.html#consume,StreamTransport	stream: consume(transp: StreamTransport): InternalRaisesFuture[int,\n    (TransportError, CancelledError)]	
consume	chronos/transports/stream.html#consume,StreamTransport,int	stream: consume(transp: StreamTransport; n: int): InternalRaisesFuture[int,\n    (TransportError, CancelledError)]	
readMessage	chronos/transports/stream.html#readMessage,StreamTransport,ReadMessagePredicate	stream: readMessage(transp: StreamTransport; predicate: ReadMessagePredicate): InternalRaisesFuture[\n    void, (TransportError, CancelledError)]	
join	chronos/transports/stream.html#join,StreamTransport	stream: join(transp: StreamTransport): InternalRaisesFuture[void, (CancelledError,)]	
closed	chronos/transports/stream.html#closed,StreamTransport	stream: closed(transp: StreamTransport): bool	
finished	chronos/transports/stream.html#finished,StreamTransport	stream: finished(transp: StreamTransport): bool	
failed	chronos/transports/stream.html#failed,StreamTransport	stream: failed(transp: StreamTransport): bool	
running	chronos/transports/stream.html#running,StreamTransport	stream: running(transp: StreamTransport): bool	
close	chronos/transports/stream.html#close,StreamTransport	stream: close(transp: StreamTransport)	
closeWait	chronos/transports/stream.html#closeWait,StreamTransport	stream: closeWait(transp: StreamTransport): InternalRaisesFuture[void, void]	
shutdownWait	chronos/transports/stream.html#shutdownWait,StreamTransport	stream: shutdownWait(transp: StreamTransport): InternalRaisesFuture[void,\n    (TransportError, CancelledError)]	
fromPipe2	chronos/transports/stream.html#fromPipe2,AsyncFD,StreamTransport	stream: fromPipe2(fd: AsyncFD; child: StreamTransport = nil;\n          bufferSize = DefaultStreamBufferSize): Result[StreamTransport,\n    OSErrorCode]	
fromPipe	chronos/transports/stream.html#fromPipe,AsyncFD,StreamTransport	stream: fromPipe(fd: AsyncFD; child: StreamTransport = nil;\n         bufferSize = DefaultStreamBufferSize): StreamTransport	
